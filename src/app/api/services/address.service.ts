/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createAddress } from '../fn/address/create-address';
import { CreateAddress$Params } from '../fn/address/create-address';
import { getAllCustomerAddresses } from '../fn/address/get-all-customer-addresses';
import { GetAllCustomerAddresses$Params } from '../fn/address/get-all-customer-addresses';
import { ModelsAddress } from '../models/models-address';


/**
 * Adresy
 */
@Injectable({ providedIn: 'root' })
export class AddressService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllCustomerAddresses()` */
  static readonly GetAllCustomerAddressesPath = '/api/address';

  /**
   * Všechny adresy zákazníka.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllCustomerAddresses()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCustomerAddresses$Response(params?: GetAllCustomerAddresses$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ModelsAddress>>> {
    return getAllCustomerAddresses(this.http, this.rootUrl, params, context);
  }

  /**
   * Všechny adresy zákazníka.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllCustomerAddresses$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCustomerAddresses(params?: GetAllCustomerAddresses$Params, context?: HttpContext): Observable<Array<ModelsAddress>> {
    return this.getAllCustomerAddresses$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ModelsAddress>>): Array<ModelsAddress> => r.body)
    );
  }

  /** Path part for operation `createAddress()` */
  static readonly CreateAddressPath = '/api/address';

  /**
   * Vytvoření adresy.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createAddress()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAddress$Response(params?: CreateAddress$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return createAddress(this.http, this.rootUrl, params, context);
  }

  /**
   * Vytvoření adresy.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createAddress$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAddress(params?: CreateAddress$Params, context?: HttpContext): Observable<void> {
    return this.createAddress$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
