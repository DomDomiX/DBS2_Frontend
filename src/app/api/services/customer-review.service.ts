/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createReview } from '../fn/customer-review/create-review';
import { CreateReview$Params } from '../fn/customer-review/create-review';
import { isUserReviewBeingApproved } from '../fn/customer-review/is-user-review-being-approved';
import { IsUserReviewBeingApproved$Params } from '../fn/customer-review/is-user-review-being-approved';
import { ModelsTrueFalse } from '../models/models-true-false';


/**
 * Recenze zákazníka
 */
@Injectable({ providedIn: 'root' })
export class CustomerReviewService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createReview()` */
  static readonly CreateReviewPath = '/api/review/customer';

  /**
   * Vytvoření recenze.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createReview()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createReview$Response(params?: CreateReview$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return createReview(this.http, this.rootUrl, params, context);
  }

  /**
   * Vytvoření recenze.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createReview$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createReview(params?: CreateReview$Params, context?: HttpContext): Observable<void> {
    return this.createReview$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `isUserReviewBeingApproved()` */
  static readonly IsUserReviewBeingApprovedPath = '/api/review/customer/isBeingApproved';

  /**
   * Zjištění zda se uživatelova recenze schvaluje.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `isUserReviewBeingApproved()` instead.
   *
   * This method doesn't expect any request body.
   */
  isUserReviewBeingApproved$Response(params: IsUserReviewBeingApproved$Params, context?: HttpContext): Observable<StrictHttpResponse<ModelsTrueFalse>> {
    return isUserReviewBeingApproved(this.http, this.rootUrl, params, context);
  }

  /**
   * Zjištění zda se uživatelova recenze schvaluje.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `isUserReviewBeingApproved$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  isUserReviewBeingApproved(params: IsUserReviewBeingApproved$Params, context?: HttpContext): Observable<ModelsTrueFalse> {
    return this.isUserReviewBeingApproved$Response(params, context).pipe(
      map((r: StrictHttpResponse<ModelsTrueFalse>): ModelsTrueFalse => r.body)
    );
  }

}
