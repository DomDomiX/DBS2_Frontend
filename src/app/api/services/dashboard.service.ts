/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { bookPopularityStats } from '../fn/dashboard/book-popularity-stats';
import { BookPopularityStats$Params } from '../fn/dashboard/book-popularity-stats';
import { bookStats } from '../fn/dashboard/book-stats';
import { BookStats$Params } from '../fn/dashboard/book-stats';
import { customerActivity } from '../fn/dashboard/customer-activity';
import { CustomerActivity$Params } from '../fn/dashboard/customer-activity';
import { ModelsBookPopularityStat } from '../models/models-book-popularity-stat';
import { ModelsBookStat } from '../models/models-book-stat';
import { ModelsCustomerActivity } from '../models/models-customer-activity';


/**
 * Dashboard
 */
@Injectable({ providedIn: 'root' })
export class DashboardService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `bookPopularityStats()` */
  static readonly BookPopularityStatsPath = '/api/dashboard/bookPopularityStats';

  /**
   * Popularita knih.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookPopularityStats()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookPopularityStats$Response(params?: BookPopularityStats$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ModelsBookPopularityStat>>> {
    return bookPopularityStats(this.http, this.rootUrl, params, context);
  }

  /**
   * Popularita knih.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookPopularityStats$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookPopularityStats(params?: BookPopularityStats$Params, context?: HttpContext): Observable<Array<ModelsBookPopularityStat>> {
    return this.bookPopularityStats$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ModelsBookPopularityStat>>): Array<ModelsBookPopularityStat> => r.body)
    );
  }

  /** Path part for operation `bookStats()` */
  static readonly BookStatsPath = '/api/dashboard/bookStats';

  /**
   * Statistiky knih.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookStats()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookStats$Response(params?: BookStats$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ModelsBookStat>>> {
    return bookStats(this.http, this.rootUrl, params, context);
  }

  /**
   * Statistiky knih.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookStats$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookStats(params?: BookStats$Params, context?: HttpContext): Observable<Array<ModelsBookStat>> {
    return this.bookStats$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ModelsBookStat>>): Array<ModelsBookStat> => r.body)
    );
  }

  /** Path part for operation `customerActivity()` */
  static readonly CustomerActivityPath = '/api/dashboard/customerActivity';

  /**
   * Aktivita zákazníků.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `customerActivity()` instead.
   *
   * This method doesn't expect any request body.
   */
  customerActivity$Response(params?: CustomerActivity$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ModelsCustomerActivity>>> {
    return customerActivity(this.http, this.rootUrl, params, context);
  }

  /**
   * Aktivita zákazníků.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `customerActivity$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  customerActivity(params?: CustomerActivity$Params, context?: HttpContext): Observable<Array<ModelsCustomerActivity>> {
    return this.customerActivity$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ModelsCustomerActivity>>): Array<ModelsCustomerActivity> => r.body)
    );
  }

}
